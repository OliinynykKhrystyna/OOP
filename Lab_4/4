from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def draw(self, indent=0):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def draw(self, indent=0):
        print("  " * indent + f"Circle (radius={self.radius})")

class Square(Shape):
    def __init__(self, side):
        self.side = side

    def draw(self, indent=0):
        print("  " * indent + f"Square (side={self.side})")

class ShapeGroup(Shape):
    def __init__(self, name):
        self.name = name
        self.children = []

    def add(self, shape: Shape):
        self.children.append(shape)

    def draw(self, indent=0):
        print("  " * indent + f"Group: {self.name}")
        for shape in self.children:
            shape.draw(indent + 1)

class ShapeDesignerFacade:
    def __init__(self):
        self.root = ShapeGroup("RootDesign")

    def create_circle(self, radius):
        return Circle(radius)

    def create_square(self, side):
        return Square(side)

    def create_group(self, name):
        return ShapeGroup(name)

    def add_to_root(self, shape: Shape):
        self.root.add(shape)

    def render(self):
        print("[Shape Rendering]")
        self.root.draw()

if __name__ == "__main__":
    designer = ShapeDesignerFacade()

    circle1 = designer.create_circle(5)
    square1 = designer.create_square(3)
    group1 = designer.create_group("MyShapes")

    group1.add(circle1)
    group1.add(square1)

    circle2 = designer.create_circle(2)
    designer.add_to_root(group1)
    designer.add_to_root(circle2)

    designer.render()
